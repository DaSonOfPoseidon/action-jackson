<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Action Jackson Admin</title>
    
    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta name="referrer" content="strict-origin-when-cross-origin">
    
    <!-- CSS -->
    <link rel="stylesheet" href="/styles/business.css">
    <link rel="stylesheet" href="/styles/admin.css">
    <!-- Font Awesome Kit  -->
    <script src="https://kit.fontawesome.com/8623ae8306.js" crossorigin="anonymous"></script>
</head>
<body>
    <div class="admin-layout">
        <%- include('../partials/admin-sidebar', { currentPage: 'quotes' }) %>

        <main class="admin-content">
            <div class="content-header">
                <h1>Quote Management</h1>
                <button class="logout-btn" id="logoutBtn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>

            <div class="filters-section">
                <form class="filters-grid" method="GET">
                    <div class="filter-group">
                        <label class="filter-label">Search</label>
                        <input type="text" name="search" class="filter-input" 
                               placeholder="Customer name, email, phone..." 
                               value="<%= filters.search %>">
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Status</label>
                        <select name="status" class="filter-input">
                            <option value="">All Statuses</option>
                            <option value="pending" <%= filters.status === 'pending' ? 'selected' : '' %>>Pending</option>
                            <option value="reviewed" <%= filters.status === 'reviewed' ? 'selected' : '' %>>Reviewed</option>
                            <option value="approved" <%= filters.status === 'approved' ? 'selected' : '' %>>Approved</option>
                            <option value="rejected" <%= filters.status === 'rejected' ? 'selected' : '' %>>Rejected</option>
                            <option value="completed" <%= filters.status === 'completed' ? 'selected' : '' %>>Completed</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Sort By</label>
                        <select name="sort" class="filter-input">
                            <option value="-createdAt" <%= filters.sort === '-createdAt' ? 'selected' : '' %>>Newest First</option>
                            <option value="createdAt" <%= filters.sort === 'createdAt' ? 'selected' : '' %>>Oldest First</option>
                            <option value="customer.name" <%= filters.sort === 'customer.name' ? 'selected' : '' %>>Customer Name</option>
                            <option value="-pricing.totalCost" <%= filters.sort === '-pricing.totalCost' ? 'selected' : '' %>>Highest Cost</option>
                            <option value="pricing.totalCost" <%= filters.sort === 'pricing.totalCost' ? 'selected' : '' %>>Lowest Cost</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <button type="submit" class="filter-btn">
                            <i class="fas fa-search"></i> Filter
                        </button>
                    </div>
                </form>
            </div>

            <div class="quotes-table">
                <div class="table-header">
                    <h3>Quotes (<%= pagination.totalQuotes %> total)</h3>
                </div>
                <div class="table-responsive">
                    <table>
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <th>Service</th>
                                <th>Total Cost</th>
                                <th>Status</th>
                                <th>Invoice</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (quotes.length > 0) { %>
                                <% quotes.forEach(quote => { %>
                                    <tr>
                                        <td>
                                            <div class="customer-info"><%= quote.customer.name %></div>
                                            <div><%= quote.customer.email %></div>
                                        </td>
                                        <td><%= quote.packageOption %></td>
                                        <td>$<%= quote.pricing.totalCost %></td>
                                        <td>
                                            <span class="status-badge status-<%= quote.status || 'pending' %>">
                                                <%= (quote.status || 'pending').toUpperCase() %>
                                            </span>
                                        </td>
                                        <td>
                                            <% if (quote.invoiceId) { %>
                                                <span class="invoice-badge invoice-created">
                                                    <i class="fas fa-file-invoice"></i> Created
                                                </span>
                                            <% } else if (quote.status === 'approved') { %>
                                                <span class="invoice-badge invoice-ready">
                                                    <i class="fas fa-clock"></i> Ready
                                                </span>
                                            <% } else { %>
                                                <span class="invoice-badge invoice-pending">
                                                    <i class="fas fa-minus"></i> N/A
                                                </span>
                                            <% } %>
                                        </td>
                                        <td><%= quote.createdAt.toLocaleDateString() %></td>
                                        <td>
                                            <button class="action-btn view-quote-btn" data-quote-id="<%= quote._id %>">
                                                <i class="fas fa-eye"></i> View
                                            </button>
                                            <button class="action-btn update-status-btn" data-quote-id="<%= quote._id %>" data-status="reviewed">
                                                <i class="fas fa-check"></i> Review
                                            </button>
                                            <% if (quote.status === 'approved' && !quote.invoiceId) { %>
                                                <button class="action-btn success convert-to-invoice-btn" data-quote-id="<%= quote._id %>">
                                                    <i class="fas fa-file-invoice"></i> Create Invoice
                                                </button>
                                            <% } else if (quote.invoiceId) { %>
                                                <button class="action-btn secondary view-invoice-btn" data-invoice-id="<%= quote.invoiceId %>">
                                                    <i class="fas fa-external-link-alt"></i> View Invoice
                                                </button>
                                            <% } %>
                                            <% if (user.role === 'superadmin') { %>
                                                <button class="action-btn danger delete-quote-btn" data-quote-id="<%= quote._id %>">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="7" style="text-align: center; padding: 2rem;">
                                        No quotes found matching your criteria
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <% if (pagination.totalPages > 1) { %>
                <div class="pagination">
                    <% if (pagination.currentPage > 1) { %>
                        <a href="?page=<%= pagination.currentPage - 1 %>&search=<%= filters.search %>&status=<%= filters.status %>&sort=<%= filters.sort %>">
                            <i class="fas fa-chevron-left"></i> Previous
                        </a>
                    <% } %>

                    <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                        <% if (i === pagination.currentPage) { %>
                            <span class="current"><%= i %></span>
                        <% } else { %>
                            <a href="?page=<%= i %>&search=<%= filters.search %>&status=<%= filters.status %>&sort=<%= filters.sort %>">
                                <%= i %>
                            </a>
                        <% } %>
                    <% } %>

                    <% if (pagination.currentPage < pagination.totalPages) { %>
                        <a href="?page=<%= pagination.currentPage + 1 %>&search=<%= filters.search %>&status=<%= filters.status %>&sort=<%= filters.sort %>">
                            Next <i class="fas fa-chevron-right"></i>
                        </a>
                    <% } %>
                </div>
            <% } %>
        </main>
    </div>

    <!-- Quote to Invoice Conversion Modal -->
    <div id="invoiceModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Convert Quote to Invoice</h2>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body" id="invoiceModalBody">
                <div class="loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading quote details...
                </div>
            </div>
        </div>
    </div>

    <script>
        // Add event listeners when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Logout button
            document.getElementById('logoutBtn').addEventListener('click', logout);
            
            // View quote buttons
            document.querySelectorAll('.view-quote-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const quoteId = this.getAttribute('data-quote-id');
                    viewQuote(quoteId);
                });
            });
            
            // Update status buttons
            document.querySelectorAll('.update-status-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const quoteId = this.getAttribute('data-quote-id');
                    const status = this.getAttribute('data-status');
                    updateStatus(quoteId, status);
                });
            });
            
            // Delete quote buttons
            document.querySelectorAll('.delete-quote-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const quoteId = this.getAttribute('data-quote-id');
                    deleteQuote(quoteId);
                });
            });
            
            // Convert to invoice buttons
            document.querySelectorAll('.convert-to-invoice-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const quoteId = this.getAttribute('data-quote-id');
                    openInvoiceModal(quoteId);
                });
            });
            
            // View invoice buttons
            document.querySelectorAll('.view-invoice-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const invoiceId = this.getAttribute('data-invoice-id');
                    window.location.href = `/admin/invoices/${invoiceId}`;
                });
            });
            
            // Modal close functionality
            document.querySelector('.close').addEventListener('click', function() {
                closeInvoiceModal();
            });
            
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('invoiceModal');
                if (event.target === modal) {
                    closeInvoiceModal();
                }
            });
        });

        async function logout() {
            if (confirm('Are you sure you want to logout?')) {
                try {
                    const response = await fetch('/auth/logout', {
                        method: 'POST',
                        credentials: 'include'
                    });

                    if (response.ok) {
                        window.location.href = '/';
                    } else {
                        alert('Logout failed. Please try again.');
                    }
                } catch (error) {
                    console.error('Logout error:', error);
                    alert('Logout error. Please try again.');
                }
            }
        }

        function viewQuote(id) {
            window.location.href = `/admin/quotes/${id}`;
        }

        async function updateStatus(id, status) {
            if (!confirm(`Are you sure you want to mark this quote as ${status}?`)) {
                return;
            }

            try {
                const response = await fetch(`/admin/quotes/${id}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify({ status })
                });

                const data = await response.json();

                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update status: ' + data.error);
                }
            } catch (error) {
                console.error('Status update error:', error);
                alert('Error updating status. Please try again.');
            }
        }

        async function deleteQuote(id) {
            if (!confirm('Are you sure you want to delete this quote? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/admin/quotes/${id}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                const data = await response.json();

                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to delete quote: ' + data.error);
                }
            } catch (error) {
                console.error('Delete error:', error);
                alert('Error deleting quote. Please try again.');
            }
        }

        // Invoice modal functions
        async function openInvoiceModal(quoteId) {
            const modal = document.getElementById('invoiceModal');
            const modalBody = document.getElementById('invoiceModalBody');
            
            modal.style.display = 'block';
            modalBody.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading quote details...</div>';
            
            try {
                // Fetch quote details using the new JSON API endpoint
                const response = await fetch(`/admin/quotes/${quoteId}/data`, {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch quote details');
                }
                
                const quote = await response.json();
                renderInvoiceForm(quote);
                
            } catch (error) {
                console.error('Error loading quote:', error);
                modalBody.innerHTML = '<div class="error">Error loading quote details. Please try again.</div>';
            }
        }
        
        function closeInvoiceModal() {
            document.getElementById('invoiceModal').style.display = 'none';
        }
        
        function renderInvoiceForm(quote) {
            const modalBody = document.getElementById('invoiceModalBody');
            
            modalBody.innerHTML = `
                <div class="invoice-form">
                    <div class="quote-summary">
                        <h3>Quote Summary</h3>
                        <p><strong>Customer:</strong> ${quote.customer.name} (${quote.customer.email})</p>
                        <p><strong>Package:</strong> ${quote.packageOption}</p>
                        <p><strong>Total Cost:</strong> $${quote.pricing.totalCost || quote.pricing.estimatedTotal}</p>
                    </div>
                    
                    <form id="invoiceForm">
                        <div class="form-group">
                            <label for="serviceDescription">Service Description</label>
                            <textarea id="serviceDescription" name="serviceDescription" required>${quote.packageOption} Package Installation</textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="amount">Amount</label>
                            <input type="number" id="amount" name="amount" step="0.01" value="${quote.pricing.totalCost || quote.pricing.estimatedTotal}" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="discount">Discount (%)</label>
                            <input type="number" id="discount" name="discount" min="0" max="100" value="${quote.discount || 0}">
                        </div>
                        
                        <div class="form-group">
                            <label for="dueDate">Due Date</label>
                            <input type="date" id="dueDate" name="dueDate" value="${getDefaultDueDate()}">
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn-secondary" onclick="closeInvoiceModal()">Cancel</button>
                            <button type="submit" class="btn-primary">Create Invoice</button>
                        </div>
                    </form>
                </div>
            `;
            
            // Add form submit handler
            document.getElementById('invoiceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createInvoiceFromQuote(quote._id);
            });
        }
        
        function getDefaultDueDate() {
            const date = new Date();
            date.setDate(date.getDate() + 30); // 30 days from now
            return date.toISOString().split('T')[0];
        }
        
        async function createInvoiceFromQuote(quoteId) {
            const form = document.getElementById('invoiceForm');
            const formData = new FormData(form);
            
            const invoiceData = {
                serviceDescription: formData.get('serviceDescription'),
                amount: parseFloat(formData.get('amount')),
                discount: parseInt(formData.get('discount')) || 0,
                dueDate: formData.get('dueDate')
            };
            
            try {
                const response = await fetch(`/admin/quotes/${quoteId}/convert-to-invoice`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(invoiceData)
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    alert('Invoice created successfully!');
                    closeInvoiceModal();
                    location.reload(); // Refresh to show updated status
                } else {
                    alert('Failed to create invoice: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error creating invoice:', error);
                alert('Error creating invoice. Please try again.');
            }
        }
    </script>
</body>
</html>