<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - Action Jackson Installs & Builds</title>
    
    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="X-Frame-Options" content="DENY">
    <meta name="referrer" content="strict-origin-when-cross-origin">
    
    <!-- CSS -->
    <link rel="stylesheet" href="/styles/business.css">
    
    <style>
        :root {
            /* Admin-specific variables */
            --admin-primary: #2563eb;
            --admin-accent: #1e40af;
            --admin-danger: #dc2626;
            --admin-success: #059669;
            --admin-warning: #d97706;
        }

        body {
            background: linear-gradient(135deg, var(--background) 0%, #0f172a 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .admin-login-container {
            background: var(--surface);
            border-radius: var(--radius);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 400px;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .admin-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .admin-header h1 {
            color: var(--admin-primary);
            font-size: 1.875rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .admin-header p {
            color: var(--text-muted);
            font-size: 0.875rem;
        }

        .admin-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-label {
            color: var(--text);
            font-weight: 500;
            font-size: 0.875rem;
        }

        .form-input {
            background: var(--surface-light);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: var(--radius);
            padding: 0.75rem;
            color: var(--text);
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--admin-primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .form-input.error {
            border-color: var(--admin-danger);
        }

        .form-checkbox {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
        }

        .form-checkbox input {
            width: auto;
            margin: 0;
        }

        .form-checkbox label {
            color: var(--text-muted);
            font-size: 0.875rem;
            cursor: pointer;
        }

        .login-button {
            background: var(--admin-primary);
            color: white;
            border: none;
            border-radius: var(--radius);
            padding: 0.875rem 1.5rem;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .login-button:hover {
            background: var(--admin-accent);
            transform: translateY(-1px);
        }

        .login-button:disabled {
            background: var(--surface-light);
            color: var(--text-muted);
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            display: none;
            width: 1rem;
            height: 1rem;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .alert {
            padding: 0.75rem 1rem;
            border-radius: var(--radius);
            margin-bottom: 1rem;
            font-size: 0.875rem;
            display: none;
        }

        .alert.error {
            background: rgba(220, 38, 38, 0.1);
            color: #fca5a5;
            border: 1px solid rgba(220, 38, 38, 0.2);
        }

        .alert.success {
            background: rgba(5, 150, 105, 0.1);
            color: #6ee7b7;
            border: 1px solid rgba(5, 150, 105, 0.2);
        }

        .alert.warning {
            background: rgba(217, 119, 6, 0.1);
            color: #fcd34d;
            border: 1px solid rgba(217, 119, 6, 0.2);
        }

        .security-notice {
            background: rgba(37, 99, 235, 0.1);
            border: 1px solid rgba(37, 99, 235, 0.2);
            border-radius: var(--radius);
            padding: 1rem;
            margin-top: 1.5rem;
            font-size: 0.75rem;
            color: var(--text-muted);
            text-align: center;
        }

        .back-link {
            text-align: center;
            margin-top: 1.5rem;
        }

        .back-link a {
            color: var(--admin-primary);
            text-decoration: none;
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .back-link a:hover {
            color: var(--admin-accent);
            text-decoration: underline;
        }

        /* Mobile responsive */
        @media (max-width: 480px) {
            .admin-login-container {
                padding: 1.5rem;
            }
            
            .admin-header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="admin-login-container">
        <div class="admin-header">
            <h1>üõ†Ô∏è Admin Login</h1>
            <p>Action Jackson Installs & Builds</p>
        </div>

        <div id="loginAlert" class="alert"></div>

        <form id="loginForm" class="admin-form" method="post" action="/auth/login" novalidate>
            <div class="form-group">
                <label for="username" class="form-label">Username</label>
                <input 
                    type="text" 
                    id="username" 
                    name="username" 
                    class="form-input" 
                    required 
                    autocomplete="username"
                    spellcheck="false"
                    placeholder="Enter admin username"
                >
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <input 
                    type="password" 
                    id="password" 
                    name="password" 
                    class="form-input" 
                    required 
                    autocomplete="current-password"
                    placeholder="Enter admin password"
                >
            </div>

            <div class="form-checkbox">
                <input type="checkbox" id="rememberMe" name="rememberMe">
                <label for="rememberMe">Keep me signed in for 7 days</label>
            </div>

            <button type="submit" class="login-button" id="loginButton">
                <span class="loading-spinner" id="loadingSpinner"></span>
                <span id="buttonText">Sign In</span>
            </button>
        </form>

        <div class="security-notice">
            üîí This is a secure admin area. All login attempts are monitored and logged.
        </div>

        <div class="back-link">
            <a href="/">‚Üê Back to Main Site</a>
        </div>
    </div>

    <script>
        // Admin login functionality
        class AdminLogin {
            constructor() {
                this.form = document.getElementById('loginForm');
                this.alert = document.getElementById('loginAlert');
                this.button = document.getElementById('loginButton');
                this.spinner = document.getElementById('loadingSpinner');
                this.buttonText = document.getElementById('buttonText');
                
                this.initializeEventListeners();
                this.checkForRedirectParams();
            }

            initializeEventListeners() {
                this.form.addEventListener('submit', (e) => this.handleSubmit(e));
                
                // Clear errors when user starts typing
                ['username', 'password'].forEach(field => {
                    document.getElementById(field).addEventListener('input', () => {
                        this.clearFieldError(field);
                    });
                });
            }

            checkForRedirectParams() {
                const urlParams = new URLSearchParams(window.location.search);
                const error = urlParams.get('error');
                const message = urlParams.get('message');

                if (error) {
                    let errorMessage = 'An error occurred during login.';
                    
                    switch (error) {
                        case 'session_expired':
                            errorMessage = 'Your session has expired. Please log in again.';
                            break;
                        case 'account_invalid':
                            errorMessage = 'Account not found or inactive. Please contact administrator.';
                            break;
                        case 'system_error':
                            errorMessage = 'System error occurred. Please try again.';
                            break;
                    }
                    
                    this.showAlert(errorMessage, 'error');
                }

                if (message) {
                    this.showAlert(decodeURIComponent(message), 'success');
                }
            }

            async handleSubmit(e) {
                e.preventDefault();
                
                const formData = new FormData(this.form);
                const username = formData.get('username');
                const password = formData.get('password');
                const rememberMe = formData.get('rememberMe') === 'on';

                // Validate form
                if (!this.validateForm(username, password)) {
                    return;
                }

                this.setLoading(true);
                this.clearAlert();

                try {
                    const response = await fetch('/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username,
                            password,
                            rememberMe
                        })
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        this.showAlert('Login successful! Redirecting...', 'success');
                        
                        // Get redirect URL or default to dashboard
                        const urlParams = new URLSearchParams(window.location.search);
                        const redirectUrl = urlParams.get('redirect') || '/admin/dashboard';
                        
                        // Small delay for user feedback, then redirect
                        setTimeout(() => {
                            window.location.href = redirectUrl;
                        }, 1000);
                        
                    } else {
                        // Handle different error types
                        let errorMessage = data.error || 'Login failed. Please try again.';
                        
                        if (response.status === 423) {
                            errorMessage = 'Account temporarily locked due to failed attempts. Try again later.';
                        } else if (response.status === 429) {
                            errorMessage = 'Too many login attempts. Please wait 15 minutes and try again.';
                        }
                        
                        this.showAlert(errorMessage, 'error');
                        
                        // Focus back to username for retry
                        document.getElementById('username').focus();
                    }

                } catch (error) {
                    console.error('Login error:', error);
                    this.showAlert('Network error. Please check your connection and try again.', 'error');
                } finally {
                    this.setLoading(false);
                }
            }

            validateForm(username, password) {
                let isValid = true;
                
                // Clear previous errors
                this.clearFieldError('username');
                this.clearFieldError('password');

                // Username validation
                if (!username || username.trim().length < 3) {
                    this.setFieldError('username', 'Username must be at least 3 characters');
                    isValid = false;
                }

                // Password validation
                if (!password || password.length < 8) {
                    this.setFieldError('password', 'Password must be at least 8 characters');
                    isValid = false;
                }

                if (!isValid) {
                    this.showAlert('Please correct the errors below.', 'error');
                }

                return isValid;
            }

            setFieldError(fieldName, message) {
                const field = document.getElementById(fieldName);
                field.classList.add('error');
                
                // Create or update error message
                let errorEl = field.parentNode.querySelector('.field-error');
                if (!errorEl) {
                    errorEl = document.createElement('div');
                    errorEl.className = 'field-error';
                    errorEl.style.color = 'var(--admin-danger)';
                    errorEl.style.fontSize = '0.75rem';
                    errorEl.style.marginTop = '0.25rem';
                    field.parentNode.appendChild(errorEl);
                }
                errorEl.textContent = message;
            }

            clearFieldError(fieldName) {
                const field = document.getElementById(fieldName);
                field.classList.remove('error');
                
                const errorEl = field.parentNode.querySelector('.field-error');
                if (errorEl) {
                    errorEl.remove();
                }
            }

            showAlert(message, type) {
                this.alert.textContent = message;
                this.alert.className = `alert ${type}`;
                this.alert.style.display = 'block';
            }

            clearAlert() {
                this.alert.style.display = 'none';
            }

            setLoading(loading) {
                this.button.disabled = loading;
                this.spinner.style.display = loading ? 'block' : 'none';
                this.buttonText.textContent = loading ? 'Signing In...' : 'Sign In';
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            new AdminLogin();
        });
    </script>
</body>
</html>